.TH POPLOG 1 "Jan 1991" "Poplog V14"

Poplog \- a multi\-language interactive software development environment

.SH SYNOPSIS
.B pop11 [ \fI\+saved-image\fP ... ]
[ \fI argument .\.\.\fP ]
[ \fI :command\fP ]
.LP
.B ved [ \fIfilename\fP ]
.LP
.B prolog [ \fI\-|\+saved-image\fP ]
.LP
.B clisp [ \fI\-|\+saved-image\fP ]
.LP
.B pml [ \fI\-|\+saved-image\fP ]
.LP
.SH DESCRIPTION

\fIPoplog\fP is an integrated, interactive, multi-language software
development environment. It provides incremental compilers for POP-11,
PROLOG, COMMON LISP and ML. Features include a powerful extensible
multi-window text editor (\fIVed\fP), over 1700 documentation files, the \fI
Poplog Window Manager\fP (\fIPwm\fP), many demonstration and utility
libraries including an object oriented extension to Pop-11 known as
\fIFlavours\fP, compiler-building tools, and mechanisms for dynamically linking
PASCAL, FORTRAN and C programs so that they can be called from \fIPoplog\fP.

Since Version 14, it has included a sophisticated interface to The X
Window System (X11R4), with facilities for dynamically linking in widget
sets (e.g.
Motif or Open Look), handling toolkit events, and remote access via X
terminals.

\fIPoplog\fP includes the source code for a large number of library
packages, which are usually programs that the user can read, copy
and modify.
.LP
At the heart of \fIPoplog\fP is the \fIPoplog Virtual Machine\fP. The
\fIPoplog\fP compilers translate program text and into a sequence of \fIPoplog
Virtual Machine\fP (\fIVM\fP) instructions, that are in turn compiled into
real machine code instructions. This system provides the programmer with a
suitable environment for rapid-prototyping, whilst also ensuring efficient
code execution. The provision of the \fIPoplog Virtual Machine\fP as a target
for compilers simplifies porting of Poplog languages, and programs written
using them, to new machines.

Programs written using AlphaPop on a Macintosh will run on implementations
of Poplog on
Workstations running UNIX, and DEC VAX machines running VMS. A list of
currently supported hardware bases is available (see below for address).
.LP
The \fIPoplog Virtual Machine\fP provides support for a large variety of
datatypes, including linked lists, arrays, strings, integers and floating
point numbers. Users can define new datatypes. \fIPoplog\fP variables and
constants can either be dynamically or lexically scoped, and are weakly typed.
\fIPoplog\fP provides a trace and debugging facilities. It also has a very
efficient storage manager, using a mark-and-sweep copying garbage collector,
which is automatically replaced by a non-copying algorithm when there is not
enough space for copying. \fIPop-11\fP processes start from under a megabyte
in size. Prolog, Lisp or ML require more, but all start in less than two
megabytes. Poplog processes can grow to whatever size the machine and the
operating system will allow.
.LP
The core language of \fIPoplog\fP is \fIPop-11\fP. \fIPop-11\fP combines the
features found in other AI languages like Lisp with a syntax that is similar
in form to Pascal or C. \fIPop-11\fP code is easy to read, and includes many
control structures. For example, the following \fIPop-11\fP code prints the
word "hello" out five times:
.sp
.in +8
.nf
repeat 5 times
    "hello" =>   ;;; print hello out five times
endrepeat;
.fi
.in -8
.LP
Because the syntax of \fIPop-11\fP is very readable, it is easy to learn, and
has been found to be very effective as a teaching tool. However, \fIPop-11\fP
programmers can also make use of rich syntactic structures, and the large
numbers of utilities, to write very complex and diverse packages. Since the
editor, the compiler and the debugging tools are all part of the same
environment, programmers are saved from the laborious task of switching
between editors and compilers, waiting for error messages from the compilers,
and switching back to the editor again.
.LP
\fIPoplog\fP is far too complex to describe fully in a manual page entry. This
document serves only as a pointer to the large amount of on-line documentation
that is available within the \fIPoplog\fP environment.
.SH COMMANDS
.LP
.TP
.I pop11
Loads the default \fIPoplog\fP system, with only the \fIPop-11\fP compiler.
.TP
.I  ved
First loads the default \fIPoplog\fP system, with the \fIPop-11\fP compiler,
and then loads the \fIPoplog\fP editor, \fIVed\fP. This command can take one
argument (a filename) that is passed to \fIVed\fP as the name of the initial
file to edit.
.TP
.I prolog, pop11 +prolog
First loads the default \fIPoplog\fP system, with the \fIPop-11\fP compiler,
and then starts the \fIProlog\fP compiler (provided as a saved image).
.TP
.I clisp, pop11 +lisp
First loads the default \fIPoplog\fP system, with the \fIPop-11\fP compiler,
and then starts the \fICommon Lisp\fP compiler (provided as a saved image).
.TP
.I pml, pop11 +pml
First loads the default \fIPoplog\fP system, with the \fIPop-11\fP compiler,
and then starts the \fIStandard ML\fP compiler.
.in -8
.SH OPTIONS
.LP
For more information on \fIPoplog\fP parameter passing, see the Poplog
help file HELP\ PARAMETERS, or the more detailed specification in
REF \SYSTEM.
.TP
\fI+saved-image\fP ...
Loads the \fIPoplog\fP environment and then looks for the specified
\fIPoplog\fP saved image. \fIPoplog\fP will search the directories specified
in \fI$popsavepath\fP, and in the current directory. The suffix .psv is added
to the filename if no suffix is specified. Several incremental saved images
can be loaded using the "+saved-image" form. Additional arguments specified
using the "-" flag will be passed into the \fIPoplog\fP environment. By
default, such arguments are ignored, although the programmer may wish to
define interpretations for them. If this option is given the \fI:command\fP
option must be omitted. For more information about saved images, see REF\
SYSTEM.
.TP
.I :command
Loads the \fIPoplog\fP environment, and then executes the \fIPop-11\fP
instruction \fIcommand\fP.
.TP
ved \fIfilename\fP
Loads the \fIPoplog\fP environment, sets up the editor (\fIVed\fP), and
reads \fIfilename\fP into a ved buffer, ready for editing.

.SH POPLOG INITIALIZATION

\fIPoplog\fP uses environent variables to store information about the location
of files, defaults and documentation. These variables are usually initialized
using a shell script. For details see your local system administrator or the
\fIPoplog Users' Guide\fP. The \fIGuide\fP also explains how to use
initialization files, such as init.p, vedinit.p, init.pl, init.lsp, and
init.ml. Default scripts reside in the pop/com directory of the \fIPoplog\fP
tree. These scripts are usually executed as part of the users \fI.login\fP
script. A typical login script would contain the following:
.LP
.ti+8n
\fBsetenv usepop /usr/local/pop14 (or whatever)\fP
.ti+8n
\fBsource $usepop/pop/com/poplog\fP
.LP

\fIPoplog\fP initialization often prints out a message giving the Poplog
version, and adds the \fIPoplog\fP executables to the users PATH.
.LP
For more information, contact your system administrator, or see the User Guide,
or the online information in POPLOG HELP\ INITIAL.
.LP
.SH ENVIRONMENT VARIABLES
.TP
.I $usepop
Holds the path to the root of the \fIPoplog\fP directory tree.
.TP
.I $poplocal
Holds the path to the root of the \fIPoplog\fP local tree. This is used to
store site-specific libraries and documentation.
.TP
.I $popcom
Set to \fI$usepop\fP/pop/com. This directory holds several csh(1) scripts for
making default saved images, and setting up the poplog environment.
.TP
.I $popsrc
Set to \fI$usepop\fP/pop/src. This directory contains the sources for the
\fIPoplog\fP environment, if provided. The sources may be in object file form.
.TP
.I $popsys
Set to \fI$usepop\fP/pop/pop. Contains the \fIPoplog\fP executable commands,
including \fIpop11\fP, \fIprolog\fP, \fIpml\fP, \fIclisp\fP. Other commands
include:
.sp
.in +8
.nf
.ig
\fIteach\fP evokes \fIVed\fP with the TEACH *TEACH file.
\fIhelp\fP evokes \fIVed\fP with the HELP *TEACH file.
..
\fIpwmtool\fP runs the Suntools Poplog Window Manager.
.ig
\fIv55\fP loads \fIVed\fP with the Visual 55 terminal setup.
\fIeliza\fP loads and runs the demo program Eliza.
..
.fi
.in -8
.TP
.I $popautolib, $poplocalauto
Set to $usepop/pop/lib/auto and $poplocal/local/auto respectively. The
compiler searches these directories when it is trying to evaluate an undefined
identifier. If a file is found with the same name as the identifier, it is
compiled. This enables the Poplog environment to be invisibly extended, whilst
conserving memory usage.
.TP
.I $poplocalbin
Directory containing local saved images.
.TP
.I $popliblib, $popdatalib, $poppwmlib, $popsunlib, $popvedlib
Set to directories containing library packages for Pop-11, Pwm, Sun consoles
and Ved.
.TP
.I $popsavelib
Set to $usepop/pop/psv. This directory contains some standard saved images,
including the Prolog, Lisp and ML saved images.
.TP
.I $popsavepath
Lists of directories containing Poplog saved images. Users may add paths to
directories containing their own saved images. By default, this is set to
$poplib:$poplocalbin:$popsavelib.
.TP
.I $poplib
User definable. Holds the path to the users library directory. \fIPoplog\fP
will look in this directory for saved images and initialization files (see
below).
.TP
.I $pop_{name}
When \fIPoplog\fP is executed, it checks the name of the command that it was
executed by (ie. argv[0]). If this command was not "pop11", \fIPoplog\fP looks
for an environment variable starting with "pop_" and ending with argv[0]. If
such a variable exists, \fIPoplog\fP treats the contents of the variable as
the arguments to \fIPoplog\fP. This is a convenient way of making new
commands. To make a command myved, which loads pop11 with the saved image
called myved.psv, make a symbolic link between $popsys/pop11 and myved, and
set the environment variable pop_myved to "+myved":
.sp
.in +8
.nf
ln -s $popsys/pop11 myved
setenv pop_myved +myved
.fi
.in -8
.LP
.SH FILES

.TP
.I $poplib/init.p
After \fIPoplog\fP is loaded, the \fIPop-11\fP code in this file is compiled.
Users can use this file define useful procedures and variables to tailor the
\fIPoplog\fP environment to their own tastes.
.TP
.I $poplib/vedinit.p
This \fIPop-11\fP file is compiled when the \fIVed\fP editor is evoked. Users
can write programs to tailor the operation of \fIVed\fP, so that for example
it behaves sensibly when different terminals are being used. This file can
also be used to define extra VED <ENTER> commands, or to modify the default
actions that \fIVed\fP takes when a new file is edited (see
HELP\ VEDFILETYPES, HELP\ VEDVEDDEFAULTS).
.TP
.I $poplib/init.pl
A file containing PROLOG code that is compiled when \fIPoplog\fP is loaded
with the PROLOG compiler.
.TP
.I $poplib/init.lsp
A file containing LISP code that is compiled when \fIPoplog\fP is loaded with
the LISP compiler.
.TP
.I $poplib/init.ml
A file containing ML code that is compiled when \fIPoplog\fP is loaded with
the ML compiler.
.LP
All of the above files are optional. If \fIPoplog\fP does not find them in the
$poplib directory, it searches the current directory.

.SH BUGS
.LP
The \fIPoplog\fP help file HELP *NEWS provides the latest information on
problems and changes in Poplog. See HELP\ *BUGFORM for details of how to
report bugs and get support.
.LP
.SH "SEE ALSO"


.IB Poplog\  HELP\  files:
.LP
HELP POPLOG, HELP INITIAL, REF SYSTEM
.LP
B. R. Barret, A. Ramsey and A. Sloman, \fI POP-11, A practical Language for
Artificial Intelligence\fP, Ellis Horwood, 1986.
.LP
.SH FURTHER INFORMATION
.LP
\fIPoplog\fP is the property of the University of Sussex. For
sales information, contact:
.sp
.in +8
.nf
Integral Solutions Ltd
Berk House
Basing View
Basingstoke
Hampshire
RG21 4RG
UK
Tel: +44 (0)1256 55899
Fax: +44 (0)1256 63467
Email: isl@isl.co.uk
.fi
.in -8

.SH AUTHOR
Copyright University of Sussex 1995. All rights reserved.
.br
   Jonathan Meyer, December 15 1989.

.ig
--- C.unix/doc/man/poplog.1
--- Copyright University of Sussex 1995. All rights reserved. ----------
