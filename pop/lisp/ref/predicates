REF PREDICATES                            Titch Le Bek, Rob Duncan, 1986

       COPYRIGHT University of Sussex 1993. All Rights Reserved.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<<<<<<<<<<<<                             >>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<<<<<<<<<<<<       LISP PREDICATES       >>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<<<<<<<<<<<<                             >>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

This file  briefly  describes  the functions,  variables  and  constants
documented in Chapter  6 of the  standard Common Lisp  guide, which  is:
Common Lisp: The Language (Guy L. Steele, Digital Press, 1984).


-------------------------------------------------
1  A Listing of Functions Variables and Constants
-------------------------------------------------

(and {form}*)                                                    [macro]
        Evaluates each  form.  If any  form  evaluates to  nil,  nil  is
        immediately returned without evaluating the remaining forms.  If
        every form  but  the last  evaluates  to a  non-nil  value,  and
        returns whatever the last form returns. and can be used both for
        logical operations where nil stands for false and non-NIL values
        stand for true, and as a conditional expression.


(arrayp object)                                               [function]
        True if object is an array; nil otherwise.


(atom object)                                                 [function]
        True if object is an atom; nil otherwise.


(bit-vector-p object)                                         [function]
        True if object is a bit-vector; nil otherwise.


(characterp object)                                           [function]
        Returns t if object is a character; nil otherwise.


(compiled-function-p object)                                  [function]
        Returns t if object is any compiled code object; nil otherwise.


(complexp object)                                             [function]
        Returns t if object is a complex number; nil otherwise.


(consp object)                                                [function]
        Returns t if object is a cons cell; nil otherwise.


(eq x y)                                                      [function]
        Returns t  if  x  and  y are  the  same  identical  object;  nil
        otherwise.


(eql x y)                                                     [function]
        Returns t if x and y are eq  or if they are numbers of the  same
        type with the same value, or if they are character objects  that
        represent the same character.


(equal x y)                                                   [function]
        Returns t if x and y are structurally similar objects. Otherwise
        nil.


(equalp x y)                                                  [function]
        Two objects are equalp if they are equal; if they are characters
        and satisfy char-equal; if  they are numbers  and have the  same
        numerical value; or if they are data structures of the same type
        whose corresponding  components are  all  equalp. The  types  of
        structured object that can be compared with equalp are:  conses,
        arrays,  record   structures   (defined   by   defstruct),   and
        hash-tables.


(floatp object)                                               [function]
        Returns t if object is a floating-point number; nil otherwise.


(functionp object)                                            [function]
        Returns t if object is suitable for applying to arguments.


(integerp object)                                             [function]
        Returns t if object is an integer; nil otherwise.


(listp list)                                                  [function]
        Returns t if list is a list; nil otherwise.


nil                                                           [constant]
        The constant  nil  evaluates  to  itself,  the  symbol  nil.  It
        represents the logical value "false",  and also the empty  list.
        nil can also be written as ().


(not x)                                                       [function]
        Returns t if x is  nil, nil otherwise. null  is the same as  not
        but is usually used to check whether something is the empty list
        whereas not is used to invert the sense of a logical value.


(null object)                                                 [function]
        Returns t if object is nil,  nil otherwise. It is equal to  not,
        but is usually used  to test for the  empty list whereas not  is
        normally used to invert a boolean value.


(numberp object)                                              [function]
        Returns t if object is any kind of number; nil otherwise.


(or {form}*)                                                     [macro]
        Evaluates each form. If any  form other than the last  evaluates
        to a non-NIL  value or  immediately returns  that value  without
        evaluating the remaining  forms. Otherwise  or returns  whatever
        the last form  evaluates to.  or can  be used  both for  logical
        operations where nil stands for  false and non-NIL values  stand
        for true, and as a conditional expression.


(packagep object)                                             [function]
        Returns t if object is a package.


(rationalp object)                                            [function]
        Returns t if object is a rational number; nil otherwise.


(realp object)                                                [function]
        Returns t if  object is  a real (i.e.  non-complex) number;  nil
        otherwise.


(simple-bit-vector-p object)                                  [function]
        Returns t if object is a simple bit vector. nil otherwise.


(simple-string-p object)                                      [function]
        Returns t if object is a simple string. nil otherwise.


(simple-vector-p object)                                      [function]
        Returns t if object is a simple vector. nil otherwise.


(stringp object)                                              [function]
        Returns t if object is a string. nil otherwise.


(subtypep type1 type2)                                        [function]
        Returns two values: t  & t if type1  is definitely a subtype  of
        type2; nil & t  if type1 is definitely  not a subtype of  type2;
        nil & nil if their relationship cannot be determined.


(symbolp object)                                              [function]
        Returns t if object is a symbol; otherwise nil.


t                                                             [constant]
        The constant  t  evaluates  to  itself,  the  symbol  t.  It  is
        generally used to represent the logical value "true".


(typep object type)                                           [function]
        Returns t if object is of type type. nil otherwise.


(vectorp object)                                              [function]
        Returns t if object is a vector. nil otherwise.



--- C.all/lisp/ref/predicates
--- Copyright University of Sussex 1993. All rights reserved.
