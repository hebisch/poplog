Welcome to LOGIC, the Cognitive Studies Question answerer.

LOGIC is a 'logic based' programming system. This is a step towards much more
powerful computers which are easy to interact with in English. LOGIC is
actually less powerful than some of the other logic programming systems in
use at Sussex, but provides a good introduction to logic programming in
general.

When LOGIC is ready for you to type something, it prints a '*' at the left of
the screen.

If you want to stop at any time, you can type

                bye.

Please be sure to include the DOT and to press the RETURN button at the end.
(If that doesn't work, hold down the CTRL key and press Y once.)

If you press the RETURN button twice, you'll get more information. Try that.

~Now type the following. Don't forget the dot at the end. Then press RETURN:

        fred loves mabel.

If at any time you make a mistake and want to correct it, press the DEL
button and the last thing you typed will be erased.
When you've finished typing the fact, press the RETURN button.
LOGIC will reply 'OK'. You can then press RETURN twice, to get more
instructions.

~The fact you typed has been stored. You can also ask a question, by
ending your sentence with a question mark. Try

        fred loves mabel?

followed by RETURN. (It is a general rule that everything you say to
LOGIC must end with either . or ?, followed by a RETURN).

~That merely confirmed what you had already said.
But what if you wanted to find out WHO Fred loves?
You can ask this by putting a 'variable' in your question,
by using 'x' to represent something unknown. Type

        fred loves x?

Don't forget the question mark. As usual, end with RETURN.

~If the computer doesn't know a fact, it will tell you. Try

        mabel loves x?

~You can also use two variables. Try this question:
        x loves y ?

(The only variables allowed are:
    'x', 'y', 'z', 'xx', 'yy', 'zz', 'someone', 'something'
N.B. use lower case only.)

~Watch what happens if fred likes more than one person:
You will have to type in some more facts first.
Try:

        fred loves jane.
        fred loves x?

~Add another romance:

        romeo loves juliet.
        x loves y ?

Try those. Don't forget the '.' and the '?'

~To find out what facts the system now knows, type

        show.

~You can tell LOGIC lots of 'facts'. The following are all facts:

        fred likes spinach.
        england is in europe.
        england is next to wales.
        england is next to scotland.

Type some of those in, and others like them. End each with a full stop.

Try some questions afterwards, like

        england is next to x?
        x is next to y?

Press RETURN twice when you want more information.

~You can tell LOGIC that the truth of a fact depends on the truth of
another. We call these CONDITIONAL facts. To give a conditional fact,
use the word "if".

        mabel loves fred if fred loves mabel.

Type in that fact, then ask the question

        mabel loves x?

~This is an example of INFERENCE. The computer did not need to be told
explicitly that mabel loves fred. Try another example of inference.

        fred is human.
        fred is mortal if fred is human.
        fred is mortal?

The computer should INFER the answer to the question, by reasoning
about the two facts.           

~The computer can be given conditional facts with variables.
Type this one in.

        fred loves x if x cooks spinach.

This means 'fred loves anyone that cooks spinach'.

~Now try

        fred loves anne?
        anne cooks spinach.
        fred loves anne?

~Reasoning with conditional facts including variables can be very powerful.
The same conditional fact can be used for lots of inferences. Here is
another conditional fact with a variable. Type it in

        x is mortal if x is human.

then add:

        mabel is human.
        joe is human.
        suzy is human.

Finally see what LOGIC can say in answer to:

        x is mortal?

~The conditional part of a fact can have the word 'and' in it,
for example try this:

        suzy loves x if x cooks spinach and x sings well.

        joe cooks spinach.
        joe sings well.
        suzy loves joe?

~Questions can have 'and's in them too, for example:

        fred loves mabel and fred loves ethel?

This can be read as
    'is it true that fred loves mabel and fred loves ethel?'

~You can give LOGIC the ability to reason about where to go if you
want to build a bicycle:

        smiths sell frames.
        martins sell plugs.
        prices sell wheels.
        prices sell buttons.
        morgans sell frames.
        prices sell frames.

        x will do for y if x sell y.
        x will do for bicycles if x will do for wheels
                and x will do for frames.

        x will do for bicycles?

See if the computer can work out the answer.

~If you have had enough, you can type

        bye.

to leave. Don't forget the dot. If not, type RETURN twice to find
out a few more useful things.

~Remember - to find out what the system knows type:

        show.

~You may sometimes want to remove some fact that you have already typed in.
To delete a fact type something like:

        delete fred loves mabel.

If you type just:

        delete.

then LOGIC will delete the most recently added thing. This is useful
if you accidentally type '.' instead of '?'.

~The facts that you have given to LOGIC make up the program's
KNOWLEDGE BASE. You may want to save the current state of the
knowledge base in some permanent place, so that you can get back
to the same state at a later stage. To do this, give a command like:

        save somename.

Pick a single word to go in place of 'somename', maybe your surname.
This will cause the current knowledge base to be stored on a magnetic
disc on the VAX computer.

~To get back to a previously saved knowledge base, give the command:

        restore somename.

This throws away any facts currently in the knowledge base and replaces
them by the ones in the named file.            

~You can use the LIST brackets '(' and ')'to group words forming a single
name. E.g.
        (joe smith) likes (mabel wilson).
        (joe smith) likes (fred bloggs).
        (fred jones) likes (mary bloggs).

type that lot in.

~Now see how you can control the answers you get by either treating each
list as an indivisible whole, or referring to its parts:            

        (joe smith) likes y?
        (joe smith) likes (fred x)?
        x likes y ?
        x likes (mabel y)?
        x likes (y bloggs)?

~Here is a somewhat more complex example, in which the computer operates
on LISTS:               
Store the following facts:
        baking cakes needs (x y) if cakes need x and utensils are y.
        cakes need (flour eggs sugar milk).
        cakes need (cake_mixture water).
        utensils are (bowl whisk spoon).
        utensils are (electric mixer).

Note that we have alternative ingredients, i.e. cakes need ....
and alternative utensils. Type that lot in.

~Use 'show.' if you want to be reminded of the facts.
Now you can ask how to bake cakes? How many different answers do you
think the computer can give? Try
        baking cakes needs x?

~We used the brackets '(' and ')' to group things together into a list.
The set of things between the brackets could be referred to separately
by variables, or else referred to as a single item. Try:
        utensils are x?
        utensils are (x y)?
        utensils are (x y z)?

~Logic programming is attracting increasing attention. If a computer
can do LOGIC then you don't have to go into so much detail telling it
things: it can make inferences on the basis of general rules.

~You have now reached the end of the teaching session.
If you continue asking for lessons, then the session will restart
from the beginning. But please carry on typing in facts and questions
if you wish.
